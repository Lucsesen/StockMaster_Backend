# Stock Control Backend ðŸš€

Este Ã© um backend simples para controle de estoque, desenvolvido em TypeScript utilizando Express, Prisma para ORM com PostgreSQL e containerizado com Docker & Docker Compose.

## Funcionalidades

- **CRUD** para itens do estoque:
  - **Criar** item
  - **Listar** todos os itens
  - **Buscar** um item por ID
  - **Atualizar** item por ID
  - **Deletar** item por ID
- **Health Check:** Endpoint `/health` para verificar se a API estÃ¡ funcionando

## Tecnologias Utilizadas

- [Node.js](https://nodejs.org/)
- [Express](https://expressjs.com/)
- [TypeScript](https://www.typescriptlang.org/)
- [Prisma ORM](https://www.prisma.io/)
- [PostgreSQL](https://www.postgresql.org/)
- [Docker & Docker Compose](https://www.docker.com/)

## PrÃ©-requisitos

- [Docker](https://www.docker.com/) e [Docker Compose](https://docs.docker.com/compose/) instalados.
- (Opcional) [Git](https://git-scm.com/) para clonar o repositÃ³rio.

## Estrutura do Projeto

stock-control-backend/ â”œâ”€â”€ prisma/ â”‚ â””â”€â”€ schema.prisma # Modelo do banco de dados e configuraÃ§Ã£o do Prisma â”œâ”€â”€ src/ â”‚ â”œâ”€â”€ routes/ â”‚ â”‚ â””â”€â”€ itemRoutes.ts # Endpoints para CRUD dos itens â”‚ â”œâ”€â”€ prisma.ts # InstÃ¢ncia do Prisma Client â”‚ â””â”€â”€ index.ts # ConfiguraÃ§Ã£o do servidor Express e definiÃ§Ã£o das rotas â”œâ”€â”€ .env # VariÃ¡veis de ambiente (DATABASE_URL) â”œâ”€â”€ Dockerfile # Dockerfile para o backend â”œâ”€â”€ docker-compose.yaml # OrquestraÃ§Ã£o dos containers (app e db) â”œâ”€â”€ package.json # DependÃªncias e scripts do Node.js â”œâ”€â”€ tsconfig.json # ConfiguraÃ§Ã£o do TypeScript â””â”€â”€ README.md # Este arquivo

bash
Copiar

## InstruÃ§Ãµes de InstalaÃ§Ã£o e ExecuÃ§Ã£o

### 1. Clone o RepositÃ³rio

No terminal, execute:

```bash
git clone <URL_DO_REPOSITÃ“RIO>
cd stock-control-backend
2. Configure as VariÃ¡veis de Ambiente
Verifique o arquivo .env. Ele jÃ¡ deve conter a seguinte configuraÃ§Ã£o padrÃ£o:

dotenv
Copiar
DATABASE_URL="postgresql://postgres:postgres@db:5432/stock_db?schema=public"
3. ConstruÃ§Ã£o e InicializaÃ§Ã£o dos Containers
Utilize o Docker Compose para construir e iniciar os containers:

(Opcional) Remova volumes antigos para limpar o banco de dados:

bash
Copiar
docker-compose down -v
Construa e inicie os containers:

bash
Copiar
docker-compose up --build
O serviÃ§o db iniciarÃ¡ o PostgreSQL.
O serviÃ§o app construirÃ¡ e executarÃ¡ a aplicaÃ§Ã£o Node.js na porta 3000.
4. Aplicando as MigraÃ§Ãµes do Prisma
ApÃ³s os containers estarem em execuÃ§Ã£o, abra um shell dentro do container do backend:

bash
Copiar
docker-compose exec app sh
Dentro do container, execute:

bash
Copiar
npx prisma migrate dev --name init
Esse comando criarÃ¡ as tabelas necessÃ¡rias no banco de dados (por exemplo, a tabela Item) e gerarÃ¡ o Prisma Client com os binÃ¡rios adequados.

5. Testando a API
Health Check:
Acesse no navegador ou via cURL/Postman:

bash
Copiar
http://localhost:3000/health
VocÃª deverÃ¡ ver a mensagem:

nginx
Copiar
API estÃ¡ funcionando
Endpoints CRUD:
Utilize o Thunder Client (extensÃ£o do VS Code), Postman ou cURL para testar os endpoints:

Criar Item (POST /items):

bash
Copiar
curl -X POST http://localhost:3000/items \
  -H "Content-Type: application/json" \
  -d '{"name": "Produto A", "quantity": 10}'
Listar Itens (GET /items):

bash
Copiar
curl http://localhost:3000/items
Buscar Item por ID (GET /items/1):

bash
Copiar
curl http://localhost:3000/items/1
Atualizar Item (PUT /items/1):

bash
Copiar
curl -X PUT http://localhost:3000/items/1 \
  -H "Content-Type: application/json" \
  -d '{"name": "Produto Atualizado", "quantity": 20}'
Deletar Item (DELETE /items/1):

bash
Copiar
curl -X DELETE http://localhost:3000/items/1
